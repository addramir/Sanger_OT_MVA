N=10000
g=sample(rbinom(N,0:2,0.5))
y1=g*0.1+rnorm(N);y1=y1/sd(y1);y1=y1-mean(y1)
y2=g*0.05+rnorm(N);y2=y2/sd(y2);y2=y2-mean(y2)
vary1=vary2=1
varg=var(g)
b1=lm(y1~g)$coeff[2]
b2=lm(y2~g)$coeff[2]
covy1y2=cov(y1,y2)
S=matrix(rep(0,9),c(3,3))
colnames(S)=rownames(S)=c("y1","y2","g")
S["y1","y1"]=vary1
S["y2","y2"]=vary2
S["g","g"]=varg
S["y1","y2"]=covy1y2
S["y1","g"]=b1*varg
S["y2","g"]=b2*varg
S[lower.tri(S)]=t(S)[lower.tri(S)]
S
.cond=function(response,pred,cond,S,N){
b_pred=S[response,pred]/S[pred,pred]
b_cond=.b(response=response,pred=cond,S=S)
b_pred=b_pred-sum(S[pred,cond]*b_cond)/S[pred,pred]
b_pred
}
S
.cond(response=1,pred=3,cond=3,S=S,N=10000)
.b=function(response,pred,S){
out <- solve(S[pred,pred])%*%S[response,pred]
return(out)
}
.seb=function(response,pred,S,N){
sigma_joint=(S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred])
#sigma_joint=S[response,response]
out=as.vector(sigma_joint)*solve(S[pred,pred])/(N-length(pred)-1)
out=diag(out)
out=sqrt(out)
return(out)
}
#
.manova=function(response,pred,S,N){
sigma_joint=(S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred])
Fst=((S[response,response]-as.vector(sigma_joint))/as.vector(sigma_joint))*((N-length(pred)-1)/length(pred))
return(Fst)
}
.t=function(response,pred,S,N){
out=.b(response=response,pred=pred,S=S)/.seb(response=response,pred=pred,S=S,N=N)
return(out)
}
.cond=function(response,pred,cond,S,N){
b_pred=S[response,pred]/S[pred,pred]
b_cond=.b(response=response,pred=cond,S=S)
b_pred=b_pred-sum(S[pred,cond]*b_cond)/S[pred,pred]
b_pred
}
N=10000
.cond(response=1,pred=3,cond=3,S=S,N=10000)
S
response=1,pred=3,cond=3,S=S,N=10000
#response=1,pred=3,cond=3,S=S,N=10000
.cond(response=1,pred=3,cond=2,S=S,N=10000)
b1
b2
res=lm(y1~g)$res
lm(res~g)
sasadsfadfasdfigma_joint=(S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred])
res=lm(y1~y2)$res
lm(res~g)
.cond(response=1,pred=3,cond=2,S=S,N=10000)
summary(lm(res~g))
solve(0.5)
.cond_se=function(response,pred,cond,S,N){
#sigma_cond=S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred]-.cond_b(response,pred,cond,S)
#sigma_joint=S[response,response]
sigma_joint=(S[response,response]-t(.b(response,pred=cond,S=S))%*%S[response,cond])
sigma_joint=sigma_joint-t(.cond_b(response,pred,cond,S))%*%S[response,pred])
.cond_se=function(response,pred,cond,S,N){
#sigma_cond=S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred]-.cond_b(response,pred,cond,S)
#sigma_joint=S[response,response]
sigma_joint=(S[response,response]-t(.b(response,pred=cond,S=S))%*%S[response,cond])
sigma_joint=sigma_joint-t(.cond_b(response,pred,cond,S))%*%S[response,pred]
out=as.vector(sigma_joint)*solve(S[pred,pred])/(N-length(pred)-1)
out=diag(out)
out=sqrt(out)
return(out)
}
.cond_se(response=1,pred=3,cond=2,S=S,N=10000)
.b=function(response,pred,S){
out <- solve(S[pred,pred])%*%S[response,pred]
return(out)
}
.seb=function(response,pred,S,N){
sigma_joint=(S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred])
#sigma_joint=S[response,response]
out=as.vector(sigma_joint)*solve(S[pred,pred])/(N-length(pred)-1)
out=diag(out)
out=sqrt(out)
return(out)
}
#
.manova=function(response,pred,S,N){
sigma_joint=(S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred])
Fst=((S[response,response]-as.vector(sigma_joint))/as.vector(sigma_joint))*((N-length(pred)-1)/length(pred))
return(Fst)
}
.t=function(response,pred,S,N){
out=.b(response=response,pred=pred,S=S)/.seb(response=response,pred=pred,S=S,N=N)
return(out)
}
.cond_b=function(response,pred,cond,S){
b_pred=S[response,pred]/S[pred,pred]
b_cond=.b(response=response,pred=cond,S=S)
b_pred=b_pred-sum(S[pred,cond]*b_cond)/S[pred,pred]
b_pred
}
.cond_se=function(response,pred,cond,S,N){
#sigma_cond=S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred]-.cond_b(response,pred,cond,S)
#sigma_joint=S[response,response]
sigma_joint=(S[response,response]-t(.b(response,pred=cond,S=S))%*%S[response,cond])
sigma_joint=sigma_joint-t(.cond_b(response,pred,cond,S))%*%S[response,pred]
out=as.vector(sigma_joint)*solve(S[pred,pred])/(N-length(pred)-1)
out=diag(out)
out=sqrt(out)
return(out)
}
.cond_se(response=1,pred=3,cond=2,S=S,N=10000)
summary(lm(res~g))
N=10000
g1=sample(rbinom(N,0:2,0.5))
g2=g1*0.1+rnorm(N)
y=g1*0.05-0.3*g2+rnorm(N)
b1=lm(y~g1)$coeff[2]
b2=lm(y~g2)$coeff[2]
b1=lm(y~g1)$coeff[2]
b2=lm(y~g2)$coeff[2]
covg=cov(g1,g2)
b1
b2
cov(g1,g2)
S=matrix(0,c(3,3))
S=matrix(0,c(3,3))
colnames(S)=rownames(S)=c("g1","g2","y")
S
S=array(0,c(3,3))
colnames(S)=rownames(S)=c("g1","g2","y")
S
S=array(0,c(3,3))
colnames(S)=rownames(S)=c("g1","g2","y")
S["g1","g1"]=var(g1)
S["g2","g2"]=var(g2)
S["y","y"]=var(y)
S["g1","g2"]=cov(g1,g2)
S["y","g1"]=b1*var(g1)
S["y","g2"]=b2*var(g2)
S[lower.tri(S)]=t(S)[lower.tri(S)]
S
S=array(0,c(3,3))
colnames(S)=rownames(S)=c("g1","g2","y")
S["g1","g1"]=var(g1)
S["g2","g2"]=var(g2)
S["y","y"]=var(y)
S["g1","g2"]=cov(g1,g2)
S["g1","y"]=b1*var(g1)
S["g2","y"]=b2*var(g2)
S[lower.tri(S)]=t(S)[lower.tri(S)]
S
var(cbind(g1,g2,y))
summary(lm(y~g1+g2))
.b(response = 3,pred=1:2,S=S)
.seb(response = 3,pred=1:2,S=S,N=N)
# conditional b1 | b2
res=lm(y~g2)$residuals
summary(lm(res~g1))
b1
.b(response = 3,pred=1:2,S=S)
summary(lm(res~g1))
.cond_b(response=3,pred=1,cond=2,S=S)
summary(lm(res~g1))
.cond_b(response=3,pred=1,cond=2,S=S)
.cond_se(response=3,pred=1,cond=2,S=S,N=N)
.cond_b(response=3,pred=1,cond=2,S=S)
.cond_se(response=3,pred=1,cond=2,S=S,N=N)
qchisq(5e-8,df=1,low=F)
y
setwd("Desktop/")
x=fread("MVA_rg_comparison.csv",data.table=F)
setwd("Desktop/")
library(data.table)
x=fread("MVA_rg_comparison.csv",data.table=F)
head(x)
plot(x$expected_rgs,x$rg)
x=fread("MVA_rg_comparison.csv",data.table=F)
head(x)
x$rg[x$rg>1]=1
x$rg[x$rg<(-1)]=-1
plot(x$expected_rgs,x$rg)
delta=abs(x$rg-x$expected_rgs)/abs(x$expected_rgs)
summary(hist)
delta=abs(x$rg-x$expected_rgs)/abs(x$expected_rgs)
summary(delta)
hist(delta)
hist(delta,n=20)
table(delta>0.1)
table(delta>0.01)
table(delta>0.02)
table(delta>0.01)
table(delta>0.05)
table(delta>0.1)
table(delta>0.05)
y=x[delta>0.05,]
View(y)
unique(y$MVA)
28/208
View(x)
table(x$MVA)
table(x$MVA)==2
sum(table(x$MVA)==2)
ll=array([[0.0266    , 0.02999918],
ll=matrix(c(0.0266    , 0.02999918,
0.02999918, 0.039),nrow=2)
ll
det(ll)
eigen(ll)
View(ll)
setwd("Desktop/")
library(data.table)
x=fread("MVA_rg_comparison.csv",data.table=F)
View(x)
x=fread("MVA_rg_comparison (1).csv",data.table=F)
head(x)
x=fread("MVA_with_h2.csv",data.table=F)
x=fread("MVA_h2.txt",data.table=F)
head(x)
setwd("~/Projects/Sanger_OT_MVA/03_mva_draft/")
library(data.table)
rgs=fread("QC_results_rg_h2_formated.txt",data.table=F)
setwd("~/Projects/Sanger_OT_MVA/03_mva_draft/")
library(data.table)
rgs=fread("QC_results_rg_h2_formated.txt",data.table=F)
cluster_summary=fread("mva_results_with_clst_name.txt",data.table=F)
cluster_summary=fread("mva_results_with_clst_name.txt",data.table=F,sep="\t")
cluster_summary=fread("mva_results_with_clst_name.txt",data.table=F,sep="\t")
View(cluster_summary)
View(rgs)
rgs$rg[rgs$rg>1]=1
rgs$rg[rgs$rg<(-1)]=-1
l=table(rgs$MVA)
View(x)
l
length(l)
View(rgs)
rgs=fread("QC_results_rg_h2_formated.txt",data.table=F)
cluster_summary=fread("mva_results_with_clst_name.txt",data.table=F,sep="\t")
rgs$rg[rgs$rg>1]=1
rgs$rg[rgs$rg<(-1)]=-1
delta_rg=abs(rgs$rg-rgs$expected_rgs)/abs(rgs$expected_rgs)
delta_rg=abs(rgs$rg-rgs$expected_rgs)/abs(rgs$expected_rgs)
delta_h2=abs(rgs$expected_h2-rgs$Total.Observed.scale.h2)/abs(rgs$expected_h2)
sumamry(delta_rg)
summary(delta_rg)
summary(delta_h2)
summary(delta_h2)
hist(delta_h2)
clusters=unqiue(rgs$MVA)
clusters=unique(rgs$MVA)
clusters
g
rgs=fread("QC_results_rg_h2_formated.txt",data.table=F)
cluster_summary=fread("mva_results_with_clst_name.txt",data.table=F,sep="\t")
clusters=unique(rgs$MVA)
rgs$rg[rgs$rg>1]=1
rgs$rg[rgs$rg<(-1)]=-1
delta_rg=abs(rgs$rg-rgs$expected_rgs)/abs(rgs$expected_rgs)
delta_h2=abs(rgs$expected_h2-rgs$Total.Observed.scale.h2)/abs(rgs$expected_h2)
hist(delta_rg)
View(rgs)
intercept=rgs$Intercept
hist(intercept)
hist(delta_rg)
table(delta_rg>0.1)
table(delta_h2>0.1)
table(delta_h2>0.2)
hist(delta_h2)
table(delta_h2>0.4)
ind_to_excl=which(delta_rg>0.1 | delta_h2>0.4 | intercept>1.2 | intercept<0.9)
clusters_to_exclude=unique(rgs$MVA[ind_to_excl])
clusters=unique(rgs$MVA)
clusters_to_exclude=unique(rgs$MVA[ind_to_excl])
clusters_passed_qc=clusters[!clusters%in%clusters_to_exclude]
View(cluster_summary)
ind=match(clusters_passed_qc,rgs$MVA)
clusters_passed_qc
clusters_passed_qc
rgs$MVA
table(rgs$MVA[ind]==clusters_passed_qc)
intercepts=rgs$Intercept[ind]
cluster_summary$intercepts
strsplit(cluster_summary$intercepts,split=";")
lapply(strsplit(cluster_summary$intercepts,split=";"),FUN=min)
intercept_min=lapply(strsplit(cluster_summary$intercepts,split=";"),FUN=min)
intercept_max=lapply(strsplit(cluster_summary$intercepts,split=";"),FUN=max)
intercept_max=unlist(lapply(strsplit(cluster_summary$intercepts,split=";"),FUN=max))
intercept_min=unlist(lapply(strsplit(cluster_summary$intercepts,split=";"),FUN=min))
intercept_max=unlist(lapply(strsplit(cluster_summary$intercepts,split=";"),FUN=max))
cluster_summary=cbind(cluster_summary,intercept_min,intercept_max)
View(cluster_summary)
rgs=fread("QC_results_rg_h2_formated.txt",data.table=F)
cluster_summary=fread("mva_results_with_clst_name.txt",data.table=F,sep="\t")
rgs$rg[rgs$rg>1]=1
rgs$rg[rgs$rg<(-1)]=-1
delta_rg=abs(rgs$rg-rgs$expected_rgs)/abs(rgs$expected_rgs)
delta_h2=abs(rgs$expected_h2-rgs$Total.Observed.scale.h2)/abs(rgs$expected_h2)
intercept=rgs$Intercept
ind_to_excl=which(delta_rg>0.1 | delta_h2>0.4 | intercept>1.3 | intercept<0.9)
clusters=unique(rgs$MVA)
clusters_to_exclude=unique(rgs$MVA[ind_to_excl])
clusters_passed_qc=clusters[!clusters%in%clusters_to_exclude]
ind=match(clusters_passed_qc,rgs$MVA)
table(rgs$MVA[ind]==clusters_passed_qc)
intercepts=rgs$Intercept[ind]
intercept_min=unlist(lapply(strsplit(cluster_summary$intercepts,split=";"),FUN=min))
intercept_max=unlist(lapply(strsplit(cluster_summary$intercepts,split=";"),FUN=max))
cluster_summary=cbind(cluster_summary,intercept_min,intercept_max)
View(cluster_summary)
clusters_passed_qc_s=paste0("./",clusters_passed_qc)
View(cluster_summary)
ind=mathc(cluster_summary$N_cluster,clusters_passed_qc_s)
clusters_passed_qc_s=paste0("./",clusters_passed_qc)
ind=mathc(cluster_summary$N_cluster,clusters_passed_qc_s)
ind=match(cluster_summary$N_cluster,clusters_passed_qc_s)
table(clusters_passed_qc_s==cluster_summary$N_cluster[ind])
cluster_summary$N_cluster
clusters_passed_qc_s
clusters_passed_qc_s=paste0("./",clusters_passed_qc)
ind=match(cluster_summary$N_cluster,clusters_passed_qc_s)
table(clusters_passed_qc_s==cluster_summary$N_cluster[ind])
table(clusters_passed_qc_s[ind]==cluster_summary$N_cluster)
cluster_summary$GIP1_intecept=NA
cluster_summary$GIP1_intecept=intercepts[ind]
View(cluster_summary)
View(cluster_summary)
CS_nona=na.omit(cluster_summary)
summary(CS_nona$GIP1_intecept/CS_nona$intercept_max)
summary(CS_nona$GIP1_intercept/CS_nona$intercept_max)
summary(CS_nona$GIP1_intecept/CS_nona$intercept_max)
summary(CS_nona$GIP1_intecept/CS_nona$intercept_max)
CS_nona
CS_nona$GIP1_intecept
CS_nona$intercept_max
summary(CS_nona$GIP1_intecept/as.numeric(CS_nona$intercept_max))
as.numeric(CS_nona$intercept_max
)
summary(CS_nona$GIP1_intecept/as.numeric(CS_nona$intercept_max))
fwrite(x=CS_nona,file="20230523_ckuster_summary_for_QC.txt",sep="\t")
View(CS_nona)
clusters_to_exclude
rgs[rgs$MVA==213,]
rgs[rgs$MVA==447,]
setwd("~/Projects/Sanger_OT_MVA/03_mva_draft/")
library(data.table)
rgs=fread("QC_results_rg_h2_formated.txt",data.table=F)
cluster_summary=fread("mva_results_with_clst_name.txt",data.table=F,sep="\t")
rgs$rg[rgs$rg>1]=1
rgs$rg[rgs$rg<(-1)]=-1
delta_rg=abs(rgs$rg-rgs$expected_rgs)/abs(rgs$expected_rgs)
delta_h2=abs(rgs$expected_h2-rgs$Total.Observed.scale.h2)/abs(rgs$expected_h2)
intercept=rgs$Intercept
ind_to_excl=which(delta_rg>0.1 | delta_h2>0.4 | intercept>1.3 | intercept<0.9)
clusters=unique(rgs$MVA)
clusters_to_exclude=unique(rgs$MVA[ind_to_excl])
clusters_passed_qc=clusters[!clusters%in%clusters_to_exclude]
ind=match(clusters_passed_qc,rgs$MVA)
table(rgs$MVA[ind]==clusters_passed_qc)
intercepts=rgs$Intercept[ind]
intercept_min=unlist(lapply(strsplit(cluster_summary$intercepts,split=";"),FUN=min))
intercept_max=unlist(lapply(strsplit(cluster_summary$intercepts,split=";"),FUN=max))
cluster_summary=cbind(cluster_summary,intercept_min,intercept_max)
clusters_passed_qc_s=paste0("./",clusters_passed_qc)
ind=match(cluster_summary$N_cluster,clusters_passed_qc_s)
table(clusters_passed_qc_s[ind]==cluster_summary$N_cluster)
cluster_summary$GIP1_intecept=NA
cluster_summary$GIP1_intecept=intercepts[ind]
CS_nona=na.omit(cluster_summary)
summary(CS_nona$GIP1_intecept/as.numeric(CS_nona$intercept_max))
fwrite(x=CS_nona,file="20230523_ckuster_summary_for_QC.txt",sep="\t")
